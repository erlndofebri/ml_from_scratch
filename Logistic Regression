{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56ca3dd1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:48.617640Z",
     "start_time": "2023-03-26T07:54:42.709712Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "21c0f6ff",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.834781Z",
     "start_time": "2023-03-26T07:54:54.742154Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  y\n",
       "0   0   0  0\n",
       "1   0   1  1\n",
       "2   1   0  1\n",
       "3   1   1  0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dictt = {\n",
    "    \"X1\":[0,0,1,1],\n",
    "    \"X2\":[0,1,0,1],\n",
    "    \"y\":[0,1,1,0]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(dictt)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "880ea8e7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.912424Z",
     "start_time": "2023-03-26T07:54:54.849195Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.array(df[[\"X1\",\"X2\"]])\n",
    "y = np.array(df['y'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58414376",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "910cf3a5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.929923Z",
     "start_time": "2023-03-26T07:54:54.920426Z"
    }
   },
   "outputs": [],
   "source": [
    "# build sigmoid function\n",
    "def sigmoid(x):\n",
    "    return 1 / (1 + np.exp(-x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8438e44d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.944889Z",
     "start_time": "2023-03-26T07:54:54.935081Z"
    }
   },
   "outputs": [],
   "source": [
    "# Loss Function\n",
    "def loss(y, y_hat):\n",
    "    loss = -np.mean(y*(np.log(y_hat)) - (1-y)*np.log(1-y_hat))\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1136e597",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.957945Z",
     "start_time": "2023-03-26T07:54:54.948818Z"
    }
   },
   "outputs": [],
   "source": [
    "def gradients(X, y, y_hat):\n",
    "    \n",
    "    # X --> Input.\n",
    "    # y --> true/target value.\n",
    "    # y_hat --> hypothesis/predictions.\n",
    "    # w --> weights (parameter).\n",
    "    # b --> bias (parameter).\n",
    "    \n",
    "    # m-> number of training examples.\n",
    "    m = X.shape[0]\n",
    "    \n",
    "    # Gradient of loss w.r.t weights.\n",
    "    dw = (1/m)*np.dot(X.T, (y_hat - y))\n",
    "    \n",
    "    # Gradient of loss w.r.t bias.\n",
    "    db = (1/m)*np.sum((y_hat - y)) \n",
    "    \n",
    "    return dw, db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "33e8da3a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.976244Z",
     "start_time": "2023-03-26T07:54:54.963910Z"
    }
   },
   "outputs": [],
   "source": [
    "def train(X, y, n_iter, lr):\n",
    "    \n",
    "    # X --> Input.\n",
    "    # y --> true/target value.\n",
    "    # n_iter --> Number of iterations.\n",
    "    # lr --> Learning rate.\n",
    "        \n",
    "    # m-> number of training examples\n",
    "    # n-> number of features \n",
    "    m, n = X.shape\n",
    "    \n",
    "    # Initializing weights and bias to zeros.\n",
    "    w = np.ones((n,1))\n",
    "    b = 0\n",
    "    \n",
    "    # Reshaping y.\n",
    "    y = y.reshape(m,1)\n",
    "    \n",
    "    # Empty list to store losses.\n",
    "    losses = []\n",
    "    \n",
    "    # Training loop.\n",
    "    for i in tqdm(range(n_iter)):\n",
    "        \n",
    "        # Calculating hypothesis/prediction.\n",
    "        y_hat = sigmoid(np.dot(X, w) + b)\n",
    "            \n",
    "        # Getting the gradients of loss w.r.t parameters.\n",
    "        dw, db = gradients(X, y, y_hat)\n",
    "            \n",
    "        # Updating the parameters.\n",
    "        w -= lr*dw\n",
    "        b -= lr*db\n",
    "        \n",
    "        # Calculating loss and appending it in the list.\n",
    "        l = loss(y, sigmoid(np.dot(X, w) + b))\n",
    "        losses.append(l)\n",
    "        \n",
    "    # returning weights, bias and losses(List).\n",
    "    return w, b, losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ec6d2f6f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:54.998348Z",
     "start_time": "2023-03-26T07:54:54.987233Z"
    }
   },
   "outputs": [],
   "source": [
    "def predict(X):\n",
    "    \n",
    "    # X --> Input.\n",
    "    \n",
    "    # Calculating presictions/y_hat.\n",
    "    preds = sigmoid(np.dot(X, w) + b)\n",
    "    \n",
    "    # Empty List to store predictions.\n",
    "    pred_class = []\n",
    "    # if y_hat >= 0.5 --> round up to 1\n",
    "    # if y_hat < 0.5 --> round up to 1\n",
    "    pred_class = [1 if i > 0.5 else 0 for i in preds]\n",
    "    \n",
    "    return np.array(pred_class), preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7f70cc4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:54:55.036672Z",
     "start_time": "2023-03-26T07:54:55.029634Z"
    }
   },
   "outputs": [],
   "source": [
    "def accuracy(y, y_hat):\n",
    "    accuracy = np.sum(y == y_hat) / len(y)\n",
    "    return accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "55846d05",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T08:03:06.343654Z",
     "start_time": "2023-03-26T08:03:06.334267Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_decision_boundary(X, w, b):\n",
    "    \n",
    "    # X --> Inputs\n",
    "    # w --> weights\n",
    "    # b --> bias\n",
    "    \n",
    "    # The Line is y=mx+c\n",
    "    # So, Equate mx+c = w.X + b\n",
    "    # Solving we find m and c\n",
    "    x1 = np.linspace(-1,2,100)\n",
    "    m = -w[0]/w[1]\n",
    "    c = -b/w[1]\n",
    "    x2 = m*x1 + c\n",
    "    \n",
    "    # Plotting\n",
    "    fig = plt.figure(figsize=(5,5))\n",
    "    sns.scatterplot(data=df, \n",
    "                    x=\"X1\", \n",
    "                    y=\"X2\", \n",
    "                    hue=\"y\")\n",
    "    plt.xlim(-1, 2)\n",
    "    plt.ylim(-1, 2)\n",
    "    \n",
    "    plt.plot(x1, x2, \"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63e08e04",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "fab17bc1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-24T09:03:49.496632Z",
     "start_time": "2023-03-24T09:03:36.003636Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████| 150000/150000 [00:13<00:00, 11127.87it/s]\n"
     ]
    }
   ],
   "source": [
    "# Training \n",
    "w, b, l = train(X, y, n_iter=150000, lr=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "0b58309a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-24T09:05:08.519661Z",
     "start_time": "2023-03-24T09:05:08.508386Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[2.49498832e-16],\n",
       "        [2.49498832e-16]]),\n",
       " -3.3294819593708155e-16)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "71941c4c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-24T09:05:10.216433Z",
     "start_time": "2023-03-24T09:05:10.208547Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat, y_proba = predict(X)\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "6a41d4aa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-24T09:05:12.011489Z",
     "start_time": "2023-03-24T09:05:12.001359Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy(y, y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "a4ec9004",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-24T09:05:14.074836Z",
     "start_time": "2023-03-24T09:05:13.786724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_decision_boundary(X, w, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d81974db",
   "metadata": {},
   "source": [
    "## Training 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9e2dc782",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:01.000209Z",
     "start_time": "2023-03-26T07:56:00.983106Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  y\n",
       "0   0   0  0\n",
       "1   1   0  1\n",
       "2   1   1  1\n",
       "3   0   1  1"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dictt = {\n",
    "    \"X1\":[0,1,1,0],\n",
    "    \"X2\":[0,0,1,1],\n",
    "    \"y\":[0,1,1,1]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(dictt)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "aab5ad41",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:13.618026Z",
     "start_time": "2023-03-26T07:56:13.606960Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.array(df[[\"X1\",\"X2\"]])\n",
    "y = np.array(df['y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "edc777cd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:39.293963Z",
     "start_time": "2023-03-26T07:56:25.350326Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████| 150000/150000 [00:13<00:00, 10808.34it/s]\n"
     ]
    }
   ],
   "source": [
    "# Training \n",
    "w, b, l = train(X, y, n_iter=150000, lr=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "afc40dcc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:40.073989Z",
     "start_time": "2023-03-26T07:56:40.060395Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[9.50350635],\n",
       "        [9.50350635]]),\n",
       " -4.289022235482868)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "544daeb9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:47.302674Z",
     "start_time": "2023-03-26T07:56:47.293390Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 1])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat, y_proba = predict(X)\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ab9e5add",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:57:38.500094Z",
     "start_time": "2023-03-26T07:57:38.489998Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.01353269],\n",
       "       [0.99459217],\n",
       "       [0.99999959],\n",
       "       [0.99459217]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_proba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3f512082",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T07:56:55.532464Z",
     "start_time": "2023-03-26T07:56:55.523062Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy(y, y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8073a4f4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-03-26T08:02:55.944684Z",
     "start_time": "2023-03-26T08:02:55.692667Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_decision_boundary(X, w, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25619399",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
